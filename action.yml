name: 'GoCD Jsonnet'
description: 'This action checks Jsonnet files to build, lint, fmt and ensure commited pipelines are up-to-date'
inputs:
  jsonnet-dir:
    description: 'The path for jsonnet files'
    required: true
    default: 'gocd/templates'
  generated-dir:
    description: 'The path for jsonnet files are rendered to'
    required: true
    default: 'gocd/generated-pipelines'
  render-as-single-file:
    descript: 'Whether to render as a single file or multiple'
    type: boolean
    default: true
    required: true
  jb-install:
    description: "When true, jb install will be run"
    type: boolean
    default: false
  check-for-changes:
    description: "If the generated pipelines are store, set this to true"
    type: boolean
    default: false
  convert-to-yaml:
    description: "If the generated pipelines should be converted from json to yaml"
    type: boolean
    default: false
  render-jsonnet-files:
    description: "Whether the action should render jsonnet files"
    type: boolean
    default: true
runs:
  using: "composite"
  steps:
    # Get the code
    - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3

    - name: Install go
      uses: actions/setup-go@v4
    - name: Install Jsonnet
      shell: bash
      run: |
        go install github.com/google/go-jsonnet/cmd/jsonnet@latest
        go install github.com/google/go-jsonnet/cmd/jsonnetfmt@latest
        go install github.com/google/go-jsonnet/cmd/jsonnet-lint@latest
        go install -a github.com/jsonnet-bundler/jsonnet-bundler/cmd/jb@latest
        go install github.com/mikefarah/yq/v4@latest

    - name: jsonnet bundler install
      shell: bash
      if: ${{ inputs.jb-install == 'true' }}
      run: |
        cd ${{inputs.jsonnet-dir}}
        jb install

    - name: jsonnetfmt
      id: jsonnetfmt
      shell: bash
      run: |
        set -eou pipefail

        # Remove multiple slashes from path
        ignore_path=$(echo "${{inputs.jsonnet-dir}}/vendor/*" | sed 's|/\+|/|g')
        for i in $(find ${{inputs.jsonnet-dir}} -type f \( -name '*.libsonnet' -o -name '*.jsonnet' \) -not -path "$ignore_path" ); do
          echo -e "\nüìã Checking format of: $i\n";
          jsonnetfmt --test $i
        done

    - name: jsonnetfmt error
      shell: bash
      if: steps.jsonnetfmt.outcome == 'failure' && always()
      run: echo -e "\n\n‚ö†Ô∏è Please run 'jsonnetfmt -i **/*.jsonnet && jsonnetfmt -i **/*.libsonnet' to fix formatting issues.\n\n"

    - name: jsonnet-lint
      shell: bash
      run: |
        set -eou pipefail

        # Remove multiple slashes from path
        ignore_path=$(echo "${{inputs.jsonnet-dir}}/vendor/*" | sed 's|/\+|/|g')
        for i in $(find ${{inputs.jsonnet-dir}} -type f \( -name '*.libsonnet' -o -name '*.jsonnet' \) -not -path "$ignore_path" ); do
          echo -e "\nüî¨ Linting: $i\n";
          jsonnet-lint -J ${{inputs.jsonnet-dir}}/vendor $i
        done

    - name: Remove existing pipelines to ensure we don't have lingering pipelines
      shell: bash
      run: |
        rm -rf   ${{inputs.generated-dir}}
        mkdir -p ${{inputs.generated-dir}}

    - name: Render Multiple Files
      shell: bash
      if: ${{ inputs.render-jsonnet-files =='true' && inputs.render-as-single-file == 'false' }}
      run: |
        set -eou pipefail

        ignore_path=$(echo "${{inputs.jsonnet-dir}}/vendor/*" | sed 's|/\+|/|g')
        for i in $(find ${{inputs.jsonnet-dir}} -type f \( -name '*.jsonnet' \) -not -path "$ignore_path" ); do
          echo -e "\nüñ®Ô∏è Rendering: $i\n";
          jsonnet \
            -J ${{inputs.jsonnet-dir}}/vendor \
            --ext-code output-files=true \
            -m ${{inputs.generated-dir}} \
            $i;
        done

    - name: Render Single File
      shell: bash
      if: ${{ inputs.render-jsonnet-files =='true' && inputs.render-as-single-file == 'true' }}
      run: |
        set -eou pipefail

        ignore_path=$(echo "${{inputs.jsonnet-dir}}/vendor/*" | sed 's|/\+|/|g')
        for i in $(find ${{inputs.jsonnet-dir}} -type f \( -name '*.jsonnet' \) -not -path "$ignore_path" ); do
          echo -e "\nüñ®Ô∏è Rendering: $i\n";
          jsonnet \
            -J ${{inputs.jsonnet-dir}}/vendor \
            --ext-code output-files=false \
            -o ${{inputs.generated-dir}}/all-pipelines.yaml \
            $i;
        done

    - name: Convert json to yaml
      shell: bash
      if: ${{ inputs.convert-to-yaml == 'true' }}
      run: |
        set -eou pipefail

        for i in $(find ${{inputs.generated-dir}} -type f \( -name '*.yaml' \) ); do
          echo -e "\nüí± Converting to yaml: $i\n";
          yq -p json -o yaml -i $i;
        done

    - name: Fail if generated pipelines have changed
      if: ${{ inputs.check-for-changes == 'true' }}
      shell: bash
      run: if [ -n "$(git status --porcelain)" ] ; then git status; exit 1; fi
